-- Q16. Employees, Departments, Locations 테이블의 구조를 파악 한 후 
--      Oxford에 근무하는 사원의 성과 이름(Name으로 별칭), 업무, 부서명, 도시명을 출력.
--      첫 번째 열은 회사명인 ‘EZEN IT’ 이라는 값을 출력.
-- by 이운산 
select 'EZEN IT', concat(e.first_name, ' ', e.last_name) as Name,
e.job_id, d.department_name, l.city 
from employees e join departments d
on e.department_id = d.department_id
join locations l
on d.location_id = l.location_id
and l.city = 'Oxford';

-- Q17. Employees, Departments 테이블의 구조를 파악한 후 사원수가 5명 이상인 부서의 부서명과 사원수를 출력. 
--      사원수가 많은 순으로 정렬.
-- by 이수연
select d.department_name, count(e.employee_id) as cnt 
from employees e join departments d 
on e.department_id = d.department_id
group by d.department_name  
having count(e.employee_id) >= 5
order by cnt desc;

-- Q18. 각 사원의 급여에 따른 급여 등급을 보고하려고 한다. 급여 등급은 JOB_GRADES 테이블에 표시. 
--      해당 테이블의 구조를 살펴본 후 사원의 성과 이름(Name으로 별칭), 업무, 부서명, 입사일, 급여, 급여등급을 출력.
-- by 이병인
select concat(e.first_name, ' ', e.last_name) as Name,
job_id as 업무, department_name as 부서명,
hire_date as 입사일, salary as 급여, grade_level as 급여등급
from employees e join job_grades jg
on (e.salary between jg.lowest_sal and jg.highest_sal)
left outer join departments d 
on (e.department_id = d.department_id);

-- Q19. 각 사원과 직속 상사와의 관계를 이용하여 다음과 같은 형식의 보고서를 작성하고자 한다. 
--  	예) 홍길동은 허균에게 보고한다 → Eleni Zlotkey report to Steven King
--      어떤 사원이 어떤 사원에서 보고하는지를 위 예를 참고하여 출력. 
--      단, 보고할 상사가 없는 사원이 있다면 그 정보도 포함하여 출력하고, 상사의 이름은 대문자로 출력.
-- by 정희도
SELECT CONCAT(
				CONCAT(e1.last_name, " ", e1.first_name),
					" report to ", IF(e1.manager_id is null, 'NULL',
					upper(CONCAT(e2.last_name, ' ', e2.first_name)))) as 'REPORT'
FROM employees e1 LEFT JOIN employees e2
ON e1.manager_id = e2.employee_id;

-- Q20. JOB_HISTORY 테이블은 사원들의 업무 변경 이력을 나타내는 테이블이다. 
--      이 정보를 이용하여 모든 사원의 현재 및 이전의 업무 이력 정보를 출력하고자 한다. 
--      중복된 사원정보가 있을 경우 한 번만 표시하여 출력.
-- by 엄성현 
select e.employee_id, concat(first_name, ' ', last_name) as Name,
h.job_id as prev_job, e.job_id as current_job
from employees e left join (
	select employee_id, max(end_date), max(job_id) as job_id
	from job_history 
	group by employee_id) h
on e.employee_id = h.employee_id;

-- 참고
select e.employee_id, job_id,
(select max(start_date)
from job_history jh 
where jh.employee_id = e.employee_id 
group by e.employee_id) as start_date,
(select max(end_date)
from job_history jh
where jh.employee_id = e.employee_id
group by e.employee_id) as end_date
from employees e
union
select employee_id, job_id,start_date, end_date from job_history
order by 1, 3;

desc job_history;
desc employees;

-- Q21. 모든 사원의 업무 이력 변경 정보 및 업무 변경에 따른 부서정보를 사번이 빠른 순서대로 출력.
-- by 엄성현
select e.employee_id,
concat(first_name, ' ', last_name) as Name,
h.job_id as prev_job, e.job_id as current_job, department_name 
from employees e left join
(select employee_id, max(end_date), max(job_id) as job_id 
from job_history group by employee_id) h
on e.employee_id = h.employee_id
join departments d
on e.department_id = d.department_id;

-- 참고
select employee_id, job_id, department_id from employees
union all
select employee_id, job_id, department_id from job_history
order by employee_id;

-- Q22. 사원정보(Employees) 테이블에 JOB_ID는 사원의 현재 업무, JOB_HISTORY에 JOB_ID는 사원의 이전 업무를 	뜻한다. 이 두 테이블을 교차해보면 업무가 변경된 사원의 정보도 볼 수 있지만 이전에 한번 했던 	같은 업무를 그대로 하고 있는 사원의 정보도 볼 수 있다. 이전에 했었던 같은 업무를 보고 있는 	사원의 사번과 업무를 출력.
-- by 박현대
select e.employee_id, j.job_title 
from employees e join job_history jh
ON e.employee_id = jh.employee_id 
join jobs j
on e.job_id = j.job_id
where e.job_id = jh.job_id;

-- 참고
select e.employee_id, jh.job_id 
from employees e join job_history jh
ON e.employee_id = jh.employee_id
and e.job_id = jh.job_id;

-- Q23. 위 결과를 이용하여 출력된 176번 사원의 업무 이력의 변경 날짜 이력을 조회.
-- by 정희도
SELECT e.employee_id, e.job_id, e.start_date, e.end_date
FROM (
SELECT e.employee_id, e.job_id,
jh.start_date, jh.end_date
FROM employees e JOIN job_history jh
ON e.employee_id = jh.employee_id
WHERE e.job_id = jh.job_id) e
WHERE e.employee_id = 176;

-- 참고
select employee_id, job_id, null as "start_date", null as "end_date"
from employees where employee_id = 176
union 
select employee_id, job_id, start_date, end_date
from job_history where employee_id = 176
limit 1, 2;

-- Q24. 인사이동 때 아직 업무가 변경된 적이 없는 사원들을 적합한 업무로 이동시키려고 한다. 
--      부서의 사원정보 테이블과 업무이력정보 테이블을 이용하여 한 번도 업무가 변경되지 않은 사원의 사번을	 출력.
-- by 한경찬
select employee_id from employees e
where e.employee_id != all (select employee_id from job_history)
order by employee_id;
-- 참고
select employee_id from employees
where employee_id not in (select employee_id from job_history)
order by 1;

-- Q25. 현재 107명의 사원은 19개의 업무에 소속되어 근무 중이다. (Distinct job_id) 
--      이 중 5개의 업무자들에 대한 급여 인상이 각각 결정되었고, 나머지 업무에 대해서는 인상이 동결되었다. 
--      HR_REP(10%), MK_REP(12%), PR_REP(15%), SA_REP(18%), IT_PROG(20%)
--      위 인상률이 적용된 사번, 사원의 성과 이름(Name으로 별칭), 업무, 급여, 인상 후 급여(“New Salary”) 	출력.
-- 	<Tip> CASE를 이용하여 위 조건을 만족하는 구문을 작성
-- by 정희도
SELECT CONCAT(last_name, " ", first_name) as 'Name', job_id, salary, 
CASE job_id
WHEN 'HR_REP' THEN salary * 1.1
WHEN 'MK_REP' THEN salary * 1.12
WHEN 'PR_REP' THEN salary * 1.15
WHEN 'SA_REP' THEN salary * 1.18
WHEN 'IT_PROG' THEN salary * 1.2
ELSE salary * 1
END as 'New Salary'
FROM employees e;

-- Q26.  최상위 입사일에 해당하는 1996년부터 1998년까지 입사자들의 급여를 각각 5%, 3%, 1% 인상하여 지분에 따른 
--       배당금으로 지급하고자 한다. 전체 사원들 중 해당년도에 해당하는 사원들의 급여를 검색하여 적용하고, 
--       입사일자에 따른 오름차순 정렬을 수행.
-- 	<Tip> CASE 구문을 이용한 검색 조건 비교를 이용하여 해당 년도 별 조건 처리를 수행 할 수 있다.
-- by 정희도
SELECT employee_id, hire_date, salary,
CASE DATE_FORMAT(hire_date, '%Y')
when 1996 then salary * 1.05
when 1997 then salary * 1.03
when 1998 then salary * 1.01
end as 'New Salary'
FROM employees e
WHERE DATE_FORMAT(hire_date, '%Y') BETWEEN 1996 AND 1998
ORDER BY hire_date;

-- Q27. 부서별 급여 합계를 구하고, 그 결과를 가지고 다음과 같이 표현하시오.
-- 	Sum Salary > 100000 이면, “Excellent"	Sum Salary > 50000 이면, “Good"
-- 	Sum Salary > 10000 이면, “Medium"	Sum Salary <= 10000 이면, “Well" 
-- 	<Tip> case 문을 사용하는 보통 방법을 사용할 수도 있고, inline view를 이용하여 우선 부서별 급여 	합계를 구하고, 상위 쿼리에서 CASE 구문을 이용하여 위의 조건 비교를 통해 급여 합계에 따른 표현을 	할 수 있다. 
-- by 정수연
select department_id, sum(salary) as "부서별 급여 합계",
case 
	when sum(salary) > 100000 then 'Excellent'
	when sum(salary) > 50000 then 'Good'
	when sum(salary) > 10000 then 'Medium'
	when sum(salary) <= 10000 then 'Well'
end as "급여합계에 따른 표현"
from employees
group by department_id;

-- Q28. 1995년 이전에 입사한 사원 중 업무에 “MGR"이 포함된 사원은 15% 급여를 인상하고, 
--      ”MAN"이 포함된 사원은 20% 급여 인상이 정해졌고, 또한 1995년부터 근무를 시작한 사원 중 
--      “MGR"이 포함된 사원은 25% 급여 인상을 수행하는 쿼리를 작성하시오. 해당되는 사원들만 출력.
-- by 안은솔
select concat(first_name, ' ', last_name) as Name, hire_date, job_id, salary,
case
	when extract(year from hire_date) < 1995 and job_id like '%MGR%' then round(salary*1.15)
	when job_id like '%MAN%' then round(salary*1.2)
	when extract(year from hire_date) >= 1995 and job_id like '%MGR%' then round(salary*1.25)
end as '인상급여'
from employees
where job_id like '%MGR%' or job_id like '%MAN%';

-- Q29. Tucker 사원(last_name)보다 급여를 많이 받고 있는 사원의 성과 이름(Name으로 별칭), 업무, 급여를 출력.
-- by 이슬기
select CONCAT(e.first_name, ' ', e.last_name) as name,
e.job_id, e.salary 
from employees e
where e.salary > (
SELECT salary from employees where last_name = 'Tucker')
order by 3 desc;

-- Q30. 사원의 급여 정보 중 업무별 최소 급여를 받고 있는 사원의 성과 이름(Name으로 별칭), 업무, 급여,
-- 	 입사일을 출력.
-- by 김근회
with e as (
select job_id, min(salary) as sal from employees group by job_id
)
select concat(first_name, ' ', last_name) as name,
e1.job_id, salary, hire_date 
from employees e1 join e 
on e1.job_id = e.job_id 
where e1.salary = e.sal;

-- Q31. 소속 부서의 평균 급여보다 많은 급여를 받는 사원의 성과 이름(Name으로 별칭), 급여, 부서번호, 업무를 출력.
-- by 김현율 : 부서별 평균급여 중 최소급여보다 급여를 많이 받는 사원
select concat(first_name, " ", last_name) as Name, 
salary, department_id, job_id 
from employees
where salary > any (
select avg(salary) from employees group by department_id);
-- 참고
select concat(first_name, " ", last_name) as Name, 
salary, department_id, job_id,
		(select round(avg(salary)) 
		from employees 
		where e.department_id = department_id ) as avg_sal_dept
from employees e
where salary  > (select avg(salary) from employees
									where department_id = e.department_id);

-- Q32. 도시 이름이 영문 'O' 로 시작하는 지역에 살고 있는 사원의 사번, 이름, 업무, 입사일을 출력.
-- by 이슬기
select e.employee_id, CONCAT(e.first_name, ' ', e.last_name) as name,
e.job_id, e.hire_date, l.city 
from employees e join departments d  
on e.department_id = d.department_id
join locations l 
on d.location_id = l.location_id 
where l.city like 'O%';

-- 참고
select employee_id, concat(first_name, " ", last_name) as Name,
job_id, hire_date
from employees
where department_id in (
	select department_id 
	from departments
	where location_id
	in (select location_id from locations where city like 'O%'));

-- Q33. 모든 사원의 소속부서 평균연봉을 계산하여 사원별로 성과 이름(Name으로 별칭), 업무, 급여, 부서번호, 부서 평균연봉(Department Avg Salary로 별칭)을 출력.
-- by 박현대
select concat(e.first_name, ' ', e.last_name) as Name, e.salary, e.department_id, e.job_id,
	(select round(avg(salary)) from employees
		where department_id = e.department_id) as "Department Avg Salary"
from employees e;

-- Q34. 부서와 업무별 급여 합계를 구하여 신년도 급여 수준 레벨을 지정하고자 한다. 
--      부서번호와 업무를 기준으로 전체 행을 그룹별로 나누어 급여 합계와 인원수를 출력
select department_id, job_id,
sum(salary), count(employee_id)
from employees
group by department_id, job_id
order by 1;

-- Q35. 위 결과에서 부서번호와 업무를 기준으로 전체 행을 그룹별로 나누어 급여 합계와 인원수를 출력하고, 부서번호와 업무로 그룹화된 총합계, 총 인원수를 출력.
select department_id, job_id,
sum(salary), count(employee_id)
from employees
group by department_id, job_id with rollup;